## ams_version=1.0

LibraryModule Library_AimmsXLLibrary {
	Prefix: axll;
	Interface: PublicSection;
	Comment: {
		"This library allows you to read from and write to .xlsx or .xls (Excel) files.
		
		The library does not need Excel to be installed on the machine and works both in Windows and Linux.
		
		The library can only read and write the file formats .xlsx and .xls, but is not capable of 
		evaluating any formula or macro that is contained in it. For that you need Excel itself.
		
		The functions in this library do not use a return value to indicate success or failure.
		Instead, the functions are created to be used in combination with the error handling mechanisms in AIMMS.
		That is why it is highly recommended to place all function calls within a :any:`block-onerror-endblock <block>` context,
		so that you can easily handle the warnings and errors that might occur during the usage of these
		functions.
		
		A typical usage looks like:
		
		  .. code::
		
		    block
	
			  axll::OpenWorkbook("mybook.xlsx");
		  
			  ! .. read or write the sheets in the workbook ..
		  
		    onerror err do
		  
			  ! .. handle the error or warning ..
		  
			  errh::MarkAsHandled(err);
		  
		    endblock;
		  
		    axll::CloseAllWorkbooks;  ! save and close any open workbook"
	}
	Section PrivateSection {
		Function LibraryDirectory {
			Arguments: libraryName;
			Range: string;
			Body: {
				if DirectoryOfLibraryProject(libraryName, LibraryDirectory) <> 1 then
					LibraryDirectory := libraryName;
				endif;
			}
			StringParameter libraryName {
				Property: Input;
			}
		}
		Function DLLDirectory {
			Arguments: libraryName;
			Range: string;
			Body: {
				DLLDirectory := LibraryDirectory(libraryName) +"DLL" + if (AimmsStringConstants('Platform') = "Windows") then "\\" else "/" endif;
			}
			StringParameter libraryName {
				Property: Input;
			}
		}
		Function DLLPath {
			Arguments: (libraryName,dllName);
			Range: string;
			Body: {
				DLLPath := DLLDirectory(libraryName) + dllName + if (AimmsStringConstants('Platform') = "Windows") then ".dll" else ".so" endif;
			}
			StringParameter libraryName {
				Property: Input;
			}
			StringParameter dllName {
				Property: Input;
			}
		}
		Procedure PreLibraryTermination {
			Body: {
				::Library_AimmsXLLibrary::closeAllWorkBooks;
				return 1;
			}
		}
		Section CommonDeclarations {
			ElementParameter STR_ENCODING {
				Range: AllCharacterEncodings;
				Property: NoSave;
				Definition: {
					if AimmsStringConstants('Platform') = "Windows" then
						'UTF-16LE'
					else
						'UTF-32LE'
					endif
				}
			}
			StringParameter DLL_NAME {
				Property: NoSave;
				Definition: DLLPath("AimmsXLLibrary", "AimmsXLLibrary");
			}
		}
	}
	Section PublicSection {
		DeclarationSection LibraryOptions {
			Parameter CalendarElementsAsStrings {
				Default: 0;
				Property: NoSave;
				Comment: {
					"Allowed values: 0 (=default) or 1.
					
					By default, when writing elements of a calendar set to a sheet, the written cells will be formatted as a Date (which always includes at least a year, a month and a day).
					If the format of the calendar does not included all these parts, it might be more convenient to write the elements as simple strings according to the calendar format.
					For example a calendar with elements { 2016, 2017, 2018 } will then be written as \"2016\", \"2017\", \"2018\" instead of 2016/1/1, 2017/1/1, 2018/1/1
					
					Similarly when reading calendar elements, by default the library expects cells formatted as Date, but when this option is set to 1 it expects strings according to the 
					date format of the calendar."
				}
			}
			Parameter WriteInfValueAsString {
				Default: 0;
				Property: NoSave;
				Comment: {
					"Allowed values: 0 (=default) or 1.
					
					By default, when writing numerical data that contains the value `INF` or `-INF`, 
					these values are written to a cell as the number 1E+150 and -1E+150 respectively.
					If you set this option to 1, these values will be written not a as numbers but as strings (\"INF\" and \"-INF\").
					This might be convenient to visually inspect the values in Excel, but please be aware that Excel formulas that 
					operates on a range with both numerical and string values present, might not work as expected."
				}
			}
			Parameter KeepExistingCellFormats {
				Default: 0;
				Property: NoSave;
				Comment: {
					"Allowed values: 0 (=default) or 1.
					
					By default, when writing data into a cell, AIMMS checks whether the specified format of that cell matches the value that is written.
					If it does not match (for example if a string value is written into a cell that is formatted as Number) then it changes the format 
					of the cell such that the value can be correctly written.
					If you set this option to 1, the format will *not* be checked and values are just copied to the cell, leaving the format as is.
					
					Setting this option to 1 is especially useful when your sheet contains cells with a custom format for which it unclear what 
					type of values can be written into it."
				}
			}
			Parameter TrimLeadingAndTrailingSpaces {
				Default: 0;
				Property: NoSave;
				Comment: {
					"Allowed values: 0 (=default) or 1.
					
					By default, when reading string valued cells, any leading or trailing spaces in a cell are interpreted by AIMMS as part of string (or element name).
					If you set this option to 1 prior to reading any data these leading and/pr trailing spaces will be removed.
					In other words: a cell with value \"  my cell value \" will be passed to AIMMS as \"my cell value\".
					
					This option does not have an effect on strings or elements that are written to the spreadsheet."
				}
			}
		}
		Section Workbook_Management {
			ExternalProcedure OpenWorkBook {
				Arguments: (WorkbookFilename);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					openWorkbook(
					  scalar string : WorkbookFilename
					)
				}
				Comment: {
					"This function loads an excel file so it can be manipulated with the functions of this library.
					It will make it the active workbook, and it\'s first sheet the active sheet.
					
					.. note::
					
						An error is issued when the workbook is already opened.
					
					When done with the workbook, you must call :any:`CloseWorkBook` to save and close."
				}
				StringParameter WorkbookFilename {
					Property: Input;
					Comment: "The path to an existing .xlsx or .xls file";
				}
			}
			ExternalProcedure CreateNewWorkBook {
				Arguments: (WorkbookFilename,FirstSheetName);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					createWorkbook(
					  scalar string : WorkbookFilename,
					  scalar string : FirstSheetName
					)
				}
				Comment: {
					"This function creates a new excel file and opens it such that it can be manipulated with the functions of this library.
					If a file with the given name already exists, this file will be overwritten.
					
					When all modifications are made, you must call :any:`CloseWorkBook()` to save and close."
				}
				StringParameter WorkbookFilename {
					Property: Input;
					Comment: "The path to the .xlsx or .xls file that you want to create.";
				}
				StringParameter FirstSheetName {
					Property: Optional;
					Comment: {
						"(Optional) The name of the single sheet in the newly created workbook.
						If you leave this empty the sheet will be named \"Sheet1\"."
					}
				}
			}
			ExternalProcedure CloseWorkBook {
				Arguments: (WorkbookFilename);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					closeWorkbook(
					  scalar string : WorkbookFilename
					)
				}
				Comment: {
					"This function closes the internal in-memory representation of the workbook that corresponds
					to the given file name.
					If any modifications have been made to this workbook, these will be saved back to the given file name.
					
					After this call, there is no active workbook and thus no active sheet.
					
					.. note::
					
						An error is issued when the workbook is not open."
				}
				StringParameter WorkbookFilename {
					Property: Input;
					Comment: "The name of an .xlsx or .xls file that was previously opened via a call to :any:`OpenWorkBook` or :any:`CreateNewWorkBook`.";
				}
			}
			ExternalProcedure SelectSheet {
				Arguments: (SheetName);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					selectSheet(
					  scalar string : SheetName
					)
				}
				Comment: {
					"This function will make the given sheet the active sheet.
					Most of the other functions in this library operate on the active sheet."
				}
				StringParameter SheetName {
					Property: Input;
					Comment: "The name of an existing sheet in the active workbook.";
				}
			}
			ExternalProcedure IsExistingSheet {
				Arguments: (SheetName);
				DllName: DLL_NAME;
				ReturnType: integer;
				Encoding: STR_ENCODING;
				BodyCall: {
					isExistingSheet(
					  scalar string : SheetName
					)
				}
				Comment: {
					"With this function you can check whether a sheet with the given name exists in the workbook.
					The function returns 1 if the sheet exists, 0 otherwise."
				}
				StringParameter SheetName {
					Property: Input;
					Comment: "The name of an existing sheet in the active workbook.";
				}
			}
			ExternalProcedure DeleteSheet {
				Arguments: (SheetName);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					deleteSheet(
					  scalar string : SheetName
					)
				}
				Comment: {
					"This function will delete the specified sheet in the current workbook.
					If it is the currently selected sheet, you must select another sheet after this call before using any of 
					the functions that operate on the currently active sheet."
				}
				StringParameter SheetName {
					Property: Input;
					Comment: "The name of an existing sheet in the active workbook.";
				}
			}
			ExternalProcedure CreateSheet {
				Arguments: (SheetName,InsertBeforeThisSheet);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					createSheet(
					  scalar string : SheetName,
					  scalar string : InsertBeforeThisSheet
					)
				}
				Comment: "This function will create a new sheet in the current workbook.";
				StringParameter SheetName {
					Property: Input;
					Comment: "The name of the new to be created sheet. If the sheet already exists an error is triggered.";
				}
				StringParameter InsertBeforeThisSheet {
					Property: Optional;
					Comment: {
						"(Optional) The new sheet will be inserted just to the left of this existing sheet. 
						If you leave this empty, the new sheet will be appended as last sheet."
					}
				}
			}
			ExternalProcedure CopySheet {
				Arguments: (SourceSheetName,NewSheetName,InsertBeforeThisSheet);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					copySheet(
					  scalar string : NewSheetName,
					  scalar string : SourceSheetName,
					  scalar string : InsertBeforeThisSheet
					)
				}
				Comment: {
					"This function will create a new sheet in the current workbook that is a 
					copy of an existing sheet."
				}
				StringParameter InsertBeforeThisSheet {
					Property: Optional;
					Comment: {
						"(Optional) The new sheet will be inserted just to the left of this existing sheet. 
						If you leave this empty, the new sheet will be appended as last sheet."
					}
				}
				StringParameter SourceSheetName {
					Property: Input;
					Comment: {
						"The name of an existing sheet in the active workbook.
						The contents of this sheet will be copied to the newly created sheet."
					}
				}
				StringParameter NewSheetName {
					Property: Input;
					Comment: "The name of the new to be created sheet. If the sheet already exists an error is triggered.";
				}
			}
			ExternalProcedure SelectWorkBook {
				Arguments: (WorkbookFilename);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					selectWorkbook(
					  scalar string : WorkbookFilename
					)
				}
				Comment: {
					"This function makes a previously loaded excel file the active workbook.
					It also makes it\'s last used sheet the active sheet."
				}
				StringParameter WorkbookFilename {
					Property: Input;
					Comment: "The name of an .xlsx or .xls file that was previously opened via a call to :any:`OpenWorkBook` or :any:`CreateNewWorkBook`.";
				}
			}
			ExternalProcedure CloseAllWorkBooks {
				DllName: DLL_NAME;
				BodyCall: closeAllWorkBooks();
				Comment: {
					"This function closes all workbooks that have been opened by calls to :any:`OpenWorkBook` or :any:`CreateNewWorkBook`.
					Calling this function is the same as calling :any:`CloseWorkBook` explicitly for every open workbook."
				}
			}
			ExternalProcedure WorkBookIsOpen {
				Arguments: (WorkbookFilename);
				DllName: DLL_NAME;
				ReturnType: integer;
				Encoding: STR_ENCODING;
				BodyCall: {
					workBookIsOpen(
					  scalar string : WorkbookFilename
					)
				}
				Comment: {
					"This function checks whether the given .xlsx or .xls file has previously been opened (and not yet closed) via
					a call to :any:`OpenWorkBook` or :any:`CreateNewWorkBook`.
					The function returns 1 if the workbook is open, or 0 otherwise."
				}
				StringParameter WorkbookFilename {
					Property: Input;
					Comment: "The path name of an .xlsx or .xls file.";
				}
			}
		}
		Section Utilities {
			ExternalProcedure ConstructRange {
				Arguments: (startCell,width,height,ResultingRange);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					constructRange(
					  scalar string : startCell,
					  integer: width,
					  integer: height,
					  scalar string : ResultingRange
					)
				}
				Comment: {
					"This support function creates a range string given a starting cell and sizes.
					
					**Example:**

						.. code::
						
						  ConstructRange(\"C2\",2,10,myString) 
						
					  sets myString to \"C2:D11\" "
				}
				StringParameter StartCell {
					Property: Input;
					Comment: {
						"A string representing the top left cell of the range. 
						For example: \"A1\" or \"D15\"."
					}
				}
				Parameter Width {
					Property: Input, Integer;
					Comment: "The number of columns of the range. It should be an integer value >= 1.";
				}
				Parameter Height {
					Property: Input, Integer;
					Comment: "The number of rows of the range. It should be an integer value >= 1.";
				}
				StringParameter ResultingRange {
					Property: Output;
					Comment: {
						"(Output) The constructed range representation. 
						Example: \"C2:D11\" "
					}
				}
			}
			ExternalProcedure GetAllSheetNames {
				Arguments: (SheetNames);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					getAllSheetNames(
					  handle : SheetNames
					)
				}
				Comment: "This function reads all existing sheet names of the active workbook and adds them as elements to the give set.";
				Set SheetNames {
					Property: Output;
					Comment: {
						"(Output) This argument should refer to an (empty) root set. On return the set will contain elements 
						that are named according to all sheets in the workbook."
					}
				}
			}
			ExternalProcedure GetNamedRanges {
				Arguments: (RangeNames,SheetName);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					getAllNamedRanges(
					  handle : RangeNames,
					  scalar string : SheetName
					)
				}
				Comment: {
					"This function reads all the named ranges for the given sheet (both local and global scope).
					The names of the ranges will be added as elements to the given set."
				}
				Set RangeNames {
					Property: Output;
					Comment: {
						"(Output) This argument should refer to an (empty) root set. On return the set will contain elements 
						that are named according to the named ranges."
					}
				}
				StringParameter SheetName {
					Property: Optional;
					Comment: {
						"(optional) The name of an existing sheet in the active workbook.
						If not specified the active sheet will be used."
					}
				}
			}
			ExternalProcedure ClearActiveSheet {
				DllName: DLL_NAME;
				BodyCall: {
					clearCurrentSheet(
					)
				}
				Comment: "This function clears the entire content of the currently active sheet.";
			}
			ExternalProcedure ClearRange {
				Arguments: (RangeToClear);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					clearRange(
					  scalar string : RangeToClear
					)
				}
				Comment: "This function clears all cells in the given range in the currently active sheet.";
				StringParameter RangeToClear {
					Property: Input;
					Comment: {
						"The (named) range to be cleared.
						Examples: \"A3:G10\", \"MyNamedRange\""
					}
				}
			}
			ExternalProcedure ColumnNumber {
				Arguments: (colName);
				DllName: DLL_NAME;
				ReturnType: integer;
				Encoding: STR_ENCODING;
				BodyCall: {
					columnNumber(
					    scalar string : colName
					)
				}
				Comment: {
					"This utility function will return the sequence number of the column passed in.
					
					**For example:**
					
					 - ColumnNumber(\"A\") will return 1
					
					 - ColumnNumber(\"B\") will return 2
					
					 - ColumnNumber(\"AB\") will return 28
					
					The name passed in can only contain characters in the range \'A\' to \'Z\' (or \'a\' to \'z\').
					
					Please note that there are limits on the number of columns in Excel:
					The maximum column name for an .xlsx file is \"XFD\" (16,384) and for an .xls file it is \"IV\" (256)."
				}
				StringParameter colName {
					Property: Input;
					Comment: {
						"The name of a column.
						Examples: \"A\", \"AB\""
					}
				}
			}
			ExternalProcedure ColumnName {
				Arguments: (colNumber,colName);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					columnName(
					    integer : colNumber,
					    scalar string : colName
					)
				}
				Comment: {
					"This utility function gives you the name that corresponds to the n-th column
					
					**For example:**
					
					 - ColumnName(1,name) will set name to \"A\"
					
					 - ColumnName(2,name) will set name to \"B\"
					
					 - ColumnName(28,name) will set name to \"AB\"
					
					The column number should be an integer greater or equal to 1.
					
					Please note that there are limits on the number of columns in Excel:
					The maximum number of columns an .xlsx file is 16,384 (\"XFD\") and for an .xls file it is 256 (\"IV\")."
				}
				Parameter colNumber {
					Property: Input;
					Comment: "The column number (should be >= 1)";
				}
				StringParameter colName {
					Property: Output;
					Comment: "(output) The name of the column.";
				}
			}
			ExternalProcedure CopyRange {
				Arguments: (DestinationRange,SourceRange,SourceSheet,AllowRangeOverflow);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					copyRange (
					scalar string : DestinationRange,
					scalar string : SourceRange,
					scalar string : SourceSheet,
					scalar integer : AllowRangeOverflow
					)
				}
				Comment: {
					"This function will copy all cells in a range to another range within the same workbook. All cell formatting is copied as well.
					
					If copying within the same sheet, it is not allowed to specify ranges that (partly) overlap.
					
					**Example:**
					
					  .. code::
						
					    CopyRange(\"B2\", \"A1:D10\", SourceSheet:\"OtherSheet\", AllowRangeOverflow:1)
					
					 This copies all the cells in the range A1:D10 of sheet OtherSheet to the range B2:E11 in the active sheet."
				}
				StringParameter DestinationRange {
					Property: Input;
          Comment: "The range in the active sheet where the cells will be copied to";
				}
				StringParameter SourceRange {
					Property: Input;
          Comment: "The range holding the cells to be copied. If the :any:`CopyRange::SourceSheet` is not specified, this range is relative to the active sheet";
				}
				StringParameter SourceSheet {
					Property: Optional;
          Comment: "If copying from one sheet to another, this specifies the sheet from which the copy takes place. The destination sheet is always the active sheet.";
				}
				Parameter AllowRangeOverflow {
					Default: 1;
					Property: Optional;
          Comment: {
            "(optional) this specifies whether the destination range should automatically be extended to match the size of the source range.
					   The default value is 1.
					   This also allows you to just specify the top-left cell as DestinationRange."
          }
				}
			}
			ExternalProcedure FirstUsedRowNumber {
				DllName: DLL_NAME;
				ReturnType: integer;
				BodyCall: firstUsedRow();
				Comment: "This function returns the first row in the current sheet that contains a cell with data.";
			}
			ExternalProcedure LastUsedRowNumber {
				DllName: DLL_NAME;
				ReturnType: integer;
				BodyCall: lastUsedRow();
				Comment: "This function returns the last row in the current sheet that contains a cell with data.";
			}
			ExternalProcedure FirstUsedColumnNumber {
				DllName: DLL_NAME;
				ReturnType: integer;
				BodyCall: firstUsedColumn();
				Comment: {
					"This function returns the number of the first column in the current sheet that contains a cell with data.
					If you need the corresponding column name you can use the function :any:`ColumnName`."
				}
			}
			ExternalProcedure LastUsedColumnNumber {
				DllName: DLL_NAME;
				ReturnType: integer;
				BodyCall: lastUsedColumn();
				Comment: {
					"This function returns the number of the last column in the current sheet that contains a cell with data.
					If you need the corresponding column name you can use the function :any:`ColumnName`."
				}
			}
			ExternalProcedure SetRangeBackgroundColor {
				Arguments: (RangeToColor,red,green,blue);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					setRangeBackgroundColor(
					  scalar string : RangeToColor,
					  integer : red,
					  integer : green,
					  integer : blue
					)
				}
				Comment: "With this function you can specify a background color for the given cell range.";
				StringParameter RangeToColor {
					Property: Input;
					Comment: {
						"The (named) range for which you want to specify the background color.
						Examples: \"A3:G10\", \"C1\", \"MyNamedRange\" "
					}
				}
				Parameter red {
					Property: Input;
					Comment: "The \'red\' value of an RGB color value [0 .. 255]";
				}
				Parameter green {
					Property: Input;
					Comment: "The \'green\' value of an RGB color value [0 .. 255]";
				}
				Parameter blue {
					Property: Input;
					Comment: "The \'blue\' value of an RGB color value [0 .. 255]";
				}
			}
		}
		Section Scalar_Read_Write {
			ExternalProcedure ReadSingleValue {
				Arguments: (ScalarReference,Cell);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					readSingleValue(
					  handle : ScalarReference,
					  scalar string : Cell
					)
				}
				Comment: {
					"This function reads a cell from the active excel sheet into the given identifier.
					
					The type of the identifier (numerical, string, element) should match with the content of the cell."
				}
				Handle ScalarReference {
					Property: Output;
					Comment: {
						"(output) The scalar identifier to be changed. This can also be a multi dimensional 
						identifier where all indices are fixed, such that the resulting slice is a scalar."
					}
				}
				StringParameter Cell {
					Property: Input;
					Comment: {
						"The cell in the active sheet to read from.
						Examples: \"A1\", \"G4\" "
					}
				}
			}
			ExternalProcedure WriteSingleValue {
				Arguments: (ScalarReference,Cell);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					writeSingleValue(
					  handle : ScalarReference,
					  scalar string : Cell
					)
				}
				Comment: {
					"This function writes a scalar to the active excel sheet 
					
					The type of the identifier (numerical, string, element) determines whether
					the cell will be formatted as a number or as text."
				}
				Handle ScalarReference {
					Property: Input;
					Comment: {
						"The scalar identifier to be written. This can also be a multi dimensional 
						identifier where all indices are fixed, such that the resulting slice is a scalar."
					}
				}
				StringParameter Cell {
					Property: Input;
					Comment: {
						"The cell in the active sheet to write to.
						Examples: \"A1\", \"G4\""
					}
				}
			}
			ExternalProcedure WriteFormula {
				Arguments: (FormulaString,Cell);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					writeFormula(
					  scalar string : FormulaString,
					  scalar string : Cell
					)
				}
				Comment: {
					"This function creates a formula in the active sheet.
					
					The given string should be a valid formula representation in Excel. It is copied as is.
					
					Please note that the AimmsXLLibrary is not capable of evaluating any formula. 
					It can only read and write .xls or .xlsx files and does not have access to the full
					calculation engine of Excel.
					To evaluate a formula you must open the sheet in Excel. Excel does store the result
					of a formula in the cell and these calculated results of a formula can be
					read back using the AimmsXLLibrary.
					
					**Examples:**
					
						.. code-block:: none

							WriteFormula(\"=SUM(B2:B6)\",\"B7\");
					
							WriteFormula(\"=HYPERLINK(\\\"#B7\\\",\\\"Goto Sum\\\")\", \"A8\");"
				}
				StringParameter FormulaString {
					Property: Input;
					Comment: "A string containing a valid Excel formula.";
				}
				StringParameter Cell {
					Property: Input;
					Comment: "The cell in the active sheet to write to.";
				}
			}
		}
		Section Sets_Read_Write {
			ExternalProcedure WriteSet {
				Arguments: (SetReference,SetRange,AllowRangeOverflow);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					writeSet(
					  handle : SetReference,
					  scalar string : SetRange,
					  scalar integer : AllowRangeOverflow
					)
				}
				Comment: {
					"This function writes the elements of a set to the active Excel sheet.
					
					.. note::
					
					  - An error occurs if the range is too small, except when :any:`AllowRangeOverflow` is set to 1.
					
					  - Remaining cells are emptied if the there are more cells than set elements.
					
					  - When writing a calendar set, the cells will be formatted as Date/Time unless the option :any:`CalendarElementsAsStrings` is set to 1."
				}
				Set SetReference {
					Property: Input;
					Comment: "The (simple) set to be written to excel.";
				}
				StringParameter SetRange {
					Property: Input;
					Comment: {
						"The 1 dimensional excel range where the data should be written, either horizontal or vertical.
						
						Examples: \"A1:A10\" or \"B2:M2\" "
					}
				}
				Parameter AllowRangeOverflow {
					Range: [0, 1];
					Property: Optional;
					Comment: {
						"optional (default 0): if set to 1 and the cardinality of the set is greater than the size of the range,
						then the write operation is allowed to extend the range to the needed size."
					}
				}
			}
			ExternalProcedure ReadSet {
				Arguments: (SetReference,SetRange,ExtendSuperSets,MergeWithExistingElements,SkipEmptyCells);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					readSet(
					  handle : SetReference,
					  scalar string : SetRange,
					  scalar integer : ExtendSuperSets,
					  scalar integer : MergeWithExistingElements,
					  scalar integer : SkipEmptyCells
					)
				}
				Comment: {
					"This function reads the cells of a range from the active excel sheet and converts them to
					elements in the given set reference."
				}
				Set SetReference {
					Property: InOut;
					Comment: {
						"The (simple) set to which the elements should be added. 
						If the argument :any:`MergeWithExistingElements` is set to 0, the set will first be emptied."
					}
				}
				StringParameter SetRange {
					Property: Input;
					Comment: {
						"The 1 dimensional excel range where the data resides, either horizontal or vertical.
						
						Examples: \"A1:A10\" or \"B2:M2\" "
					}
				}
				Parameter ExtendSuperSets {
					Range: [0, 2];
					Property: Input;
					Comment: {
						"This determines what should happen with elements that are not present in the super set of the given set.
						
						Values:
						
						- 0 : elements not in the parent set result in an error
						
						- 1 : elements not in the parent set are added recursively
						
						- 2 : elements not in the parent set are skipped
						
						If :any:`SetReference` does not refer to a set that has the subsetOf attribute specified, then this argument is ignored."
					}
				}
				Parameter MergeWithExistingElements {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.  
						If this option is set to 1 then the elements from the range are added to the current content of the set.
						If set to 0, the set is first emptied and then the elements are added."
					}
				}
				Parameter SkipEmptyCells {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						
						- If set to 0, reading of the range stops as soon as an empty cell is encountered and a warning is raised.
						- If set to 1, an empty cell in the range is simply skipped."
					}
				}
			}
		}
		Section Multi_Dimensional_Data {
			ExternalProcedure ReadTable {
				Arguments: {
					(IdentifierReference,RowHeaderRange,ColumnHeaderRange,DataRange,ModeForUnknownElements,
					 MergeWithExistingData)
				}
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					readTable(
					  handle : IdentifierReference,
					  scalar string : RowHeaderRange,
					  scalar string : ColumnHeaderRange,
					  scalar string : DataRange,
					  scalar integer : ModeForUnknownElements,
					  scalar integer : MergeWithExistingData
					)
				}
				Comment: {
					"This function reads a table from the active excel sheet into an identifier reference.
					
					The number of columns in the :any:`RowHeaderRange` plus the number of rows in the :any:`ColumnHeaderRange` 
					determines the expected dimension of the identifier that will be written.
					
					**Examples:**
					
					- 2-dimensional with one index in rows and one index in columns: 
					
					  .. code::
					  
					    ReadTable( P2(i,j), \"A2:A12\", \"B1:H2\", \"B2:H12\" )
					
					- 1-dimensional with the single index as rows: 
					
					  .. code::
					  
					    ReadTable( P1(i), \"A1:A10\", \"\", \"B1:B10\" )
					
					- 1-dimensional with the single index as columns: 
					
					  .. code::
					  
					    ReadTable( P1(i), \"\", \"A1:H1\", \"A2:H2\" )
					
					- 5-dimensional with first 3 indices as row tuples and the last 2 indices as column tuples:
					
					  .. code::
					  
					    ReadTable( P5(i,j,k,l,m), \"A3:C10\", \"D1:M2\", \"D3:M10\" )"
				}
				Handle IdentifierReference {
					Property: InOut;
					Comment: {
						"The (non scalar) identifier to which the data from the sheet will be written.
						
						You can fix a domain index of the identifier to a specific element, such that only a specific slice of the 
						identifier will be written."
					}
				}
				StringParameter RowHeaderRange {
					Property: Input;
					Comment: {
						"The excel range where the starting indices reside.
						
						It may be left empty (\"\"), which means that all indices are in the :any:`ColumnHeaderRange`.
						
						**Examples:**
						
						- \"B1:B10\" (covering only one domain index), or
						- \"B1:C10\" (representing tuples of size 2, and thus covering two domain indices)."
					}
				}
				StringParameter ColumnHeaderRange {
					Property: Input;
					Comment: {
						"The excel range where the ending indices reside. 
						
						It may be left empty (\"\"), which means that all indices are in the :any:`RowHeaderRange`.
						
						**Examples:** 
						
						- \"A1:H1\" (covering only one domain index), or
						- \"A1:H2\" (representing tuples of size 2, and thus covering two domain indices)."
					}
				}
				StringParameter DataRange {
					Property: Optional;
					Comment: {
						"(optional) Representing the range where the data of the table is.
						This range should match with the number of rows in the :any:`RowHeaderRange` and the number of columns in the :any:`ColumnHeaderRange`.
						
						If not specified, the range is automatically determined using the locations of the :any:`RowHeaderRange` and the :any:`ColumnHeaderRange`."
					}
				}
				Parameter ModeForUnknownElements {
					Property: Optional;
					Comment: {
						"(optional) Default = 0.
						This argument specified what to do with elements in the rows or columns that do not exist in the corresponding domain set.
						
						Valid values are:
						
						- 0 : unknown elements are treated as an error, and reading stops.
						
						- 1 : unknown elements are added to the corresponding set, and an error is given if this fails.
						
						- 2 : rows and columns with unknown elements are just silently skipped.
						
						- 3 : rows and columns with unknown elements are skipped, but do raise a warning."
					}
				}
				Parameter MergeWithExistingData {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						
						If set to 0, the identifier(slice) to write to is first emptied before reading any values.
						If set to 1, then only the non-blank values in the table will be written to the identifier(slice), and
						any other existing data in the identifier will remain unmodified."
					}
				}
			}
			ExternalProcedure WriteTable {
				Arguments: {
					(IdentifierReference,RowHeaderRange,ColumnHeaderRange,DataRange,allowRangeOverflow,
					 WriteZeros, IncludeEmptyRows, IncludeEmptyColumns,IncludeEmptyRowsColumns)
				}
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					writeTable(
					  handle : IdentifierReference,
					  scalar string : RowHeaderRange,
					  scalar string : ColumnHeaderRange,
					  scalar string : DataRange,
					  scalar integer : allowRangeOverflow,
					  scalar integer : writeZeros,
					  scalar integer : includeEmptyRowsColumns,
					  scalar integer : includeEmptyRows,
					  scalar integer : includeEmptyColumns
					)
				}
				Comment: {
					"This function writes an identifier in table format to the active excel sheet.
					
					Other than the function :any:`FillTable` this function overwrites all cells in the given ranges, including
					the :any:`RowHeaderRange` and :any:`ColumnHeaderRange`.
					
					.. note::
					
					  If you do not need full control over where each part of the table is written, you can also use the function :any:`WriteTableQuick`.
					
					**Examples:**
					
					- 2-dimensional with one index in rows and one index in columns: 
					
					  .. code::
					  
					    WriteTable( P2(i,j), \"A2:A12\", \"B1:H2\", \"B2:H12\" )
					
					- 1-dimensional with the single index as rows: 
					
					  .. code::
					  
					    WriteTable( P1(i), \"A1:A10\", \"\", \"B1:B10\" )
					
					- 1-dimensional with the single index as columns: 
					
					  .. code::
					  
					    WriteTable( P1(i), \"\", \"A1:H1\", \"A2:H2\" )
					
					- 5-dimensional with first 3 indices as row tuples and the last 2 indices as column tuples:
					
					  .. code::
					  
					    WriteTable( P5(i,j,k,l,m), \"A3:C10\", \"D1:M2\", \"D3:M10\" )"
				}
				Handle IdentifierReference {
					Property: Input;
					Comment: {
						"The (non scalar) identifier of which the data will be written to the table in the active sheet.
						
						You can fix a domain index of the identifier to a specific element, such that only a specific slice of the 
						identifier will be written. 
						A specification like A(i,\'fixed-j\',k) can in this way be written in a 2-dimensional table."
					}
				}
				StringParameter RowHeaderRange {
					Property: Input;
					Comment: {
						"The excel range where the starting indices should be written.
						
						It may be left empty (\"\"), which means that all indices will be in the :any:`ColumnHeaderRange`.
						
						**Examples:** 
						
						- \"B1:B10\" (covering only one domain index), or
						- \"B1:C10\" (representing tuples of size 2, and thus covering two domain indices)."
					}
				}
				StringParameter ColumnHeaderRange {
					Property: Input;
					Comment: {
						"The excel range where the ending indices are written. 
						
						It may be left empty (\"\"), which means that all indices will be in the :any:`RowHeaderRange`.
						
						**Examples:** 
						
						- \"A1:H1\" (covering only one domain index), or
						- \"A1:H2\" (representing tuples of size 2, and thus covering two domain indices)."
					}
				}
				StringParameter DataRange {
					Property: Optional;
					Comment: {
						"(optional) Representing the range where the data of the table is written.
						This range should match with the number of rows in the :any:`RowHeaderRange` and the number of columns in the :any:`ColumnHeaderRange`.
						
						If not specified, the range is automatically determined using the locations of the :any:`RowHeaderRange` and the :any:`ColumnHeaderRange`."
					}
				}
				Parameter WriteZeros {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						If set to 0 a value of 0.0 will appear as an empty cell, otherwise it will be written as an explicit 0."
					}
				}
				Parameter AllowRangeOverflow {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						If set to 1 and there are more rows and/or columns
						in the data than can be contained in the specified row header and/or column header ranges, then 
						these ranges are automatically extended."
					}
				}
				Parameter IncludeEmptyRowsColumns {
					Property: Optional;
					Comment: "(optional) Deprecated. Use the arguments :any:`IncludeEmptyRows` and/or :any:`IncludeEmptyColumns` instead.";
				}
				Parameter IncludeEmptyRows {
					Property: Optional;
					Comment: {
						"(optional) Default is 0, only applicable if the row range is over a single index
						
						If set to 1, a row in which each values equals 0 will be included.
						If set to 0, such a row will not be written at all."
					}
				}
				Parameter IncludeEmptyColumns {
					Property: Optional;
					Comment: {
						"(optional) Default is 0, only applicable if the column range is over a single index
						
						If set to 1, a column in which each values equals 0 will be included.
						If set to 0, such a column will not be written at all."
					}
				}
			}
			ExternalProcedure FillTable {
				Arguments: (IdentifierReference,RowHeaderRange,ColumnHeaderRange,DataRange,writeZeros,clearExistingContent);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					fillTable(
					  handle : IdentifierReference,
					  scalar string : RowHeaderRange,
					  scalar string : ColumnHeaderRange,
					  scalar string : DataRange,
					  scalar integer : writeZeros,
					  scalar integer : clearExistingContent
					)
				}
				Comment: {
					"This function writes an identifier to a table in an excel sheet where the row and columns are already present.
					So it reads the existing row and column ranges from the sheet and then writes the proper values to the cells
					of the :any:`DataRange`. This means that the content of the :any:`RowHeaderRange` and :any:`ColumnHeaderRange` remains unchanged and
					only the cells in the :any:`DataRange` will be written.
					
					.. note::
					
					  If you need to fill a table where there is only a row header or only a column header, use the function 
					  :any:`FillList` instead."
				}
				Handle IdentifierReference {
					Property: Input;
					Comment: {
						"The (non scalar) identifier of which the data will be written to the table in the active sheet.
						
						You can fix a domain index of the identifier to a specific element, such that only a specific slice of the 
						identifier will be written. 
						A specification like A(i,\'fixed-j\',k) can in this way be written in a 2-dimensional table."
					}
				}
				StringParameter RowHeaderRange {
					Property: Input;
					Comment: {
						"The excel range where the starting indices reside.
						
						**Examples:** 
						
						- \"B1:B10\" (covering only one domain index), or
						- \"B1:C10\" (representing tuples of size 2, and thus covering two domain indices)."
					}
				}
				StringParameter ColumnHeaderRange {
					Property: Input;
					Comment: {
						"The excel range where the ending indices reside. 
						
						**Examples:**
						
						- \"A1:H1\" (covering only one domain index), or
						- \"A1:H2\" (representing tuples of size 2, and thus covering two domain indices)."
					}
				}
				StringParameter DataRange {
					Property: Optional;
					Comment: {
						"(optional) Representing the range where the data of the table is written.
						This range should match with the number of rows in the :any:`RowHeaderRange` and the number of columns in the :any:`ColumnHeaderRange`.
						
						If not specified, the range is automatically determined using the locations of the :any:`RowHeaderRange` and the :any:`ColumnHeaderRange`."
					}
				}
				Parameter WriteZeros {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						If set to 0 a value of 0.0 will appear as an empty cell, otherwise it will be written as an explicit 0."
					}
				}
				Parameter clearExistingContent {
					Default: 1;
					Property: Optional;
					Comment: {
						"(optional) Default is 1.
						If set to 0 any existing cell content will not be overwritten by an empty value if the corresponding data
						in the identifier does not exist (or is 0.0)"
					}
				}
			}
			ExternalProcedure FillList {
				Arguments: (IdentifierReference,RowHeaderRange,DataRange,writeZeros,clearExistingContent);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					fillList(
					  handle : IdentifierReference,
					  scalar string : RowHeaderRange,
					  scalar string : DataRange,
					  scalar integer : writeZeros,
					  scalar integer : clearExistingContent
					)
				}
				Comment: {
					"This function writes an identifier to a list format in an excel sheet where the row headers are already present.
					So it reads the existing row range from the sheet and then writes the proper values to the cells
					of the :any:`DataRange`. 
					
					The :any:`DataRange` should have either a width of 1 (vertical oriented), or it should have a height
					of 1 (horizontally oriented).
					
					If the :any:`DataRange` is a horizontally oriented, the :any:`RowHeaderRange` should also
					be oriented horizontally and the number of columns in the :any:`RowHeaderRange` should match the number of
					columns in the :any:`DataRange`. In other words, the :any:`RowHeaderRange` is than treated as a column header.
					
					**Examples:**
					
					- 1-dimensional, vertically oriented: 
					
					  .. code::
					  
					    FillList( P1(i), \"A1:A10\", \"B1:B10\" )
					
					- 1-dimensional, horizontally oriented: 
										
					  .. code::
					  
					    FillList( P1(i), \"A1:J1\", \"A2:J2\" )
					
					- 2-dimensional, vertically oriented: 
										
					  .. code::

					    FillList( P2(i,j), \"A1:B20\", \"C1:C20\" )
					
					- 2-dimensional, horizontally oriented: 
										
					  .. code::
					  
					    FillList( P2(i,j), \"A1:Z2\", \"A3:Z3\" )"
				}
				Handle IdentifierReference {
					Property: Input;
					Comment: "The (non scalar) identifier of which the data will be written as a list in the active sheet.";
				}
				StringParameter RowHeaderRange {
					Property: Input;
					Comment: "The excel range where the indices reside (either horizontally or vertically oriented)";
				}
				StringParameter DataRange {
					Property: Input;
					Comment: "The excel range where the data should be written.";
				}
				Parameter WriteZeros {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						If set to 0 a value of 0.0 will appear as an empty cell, otherwise it will be written as an explicit 0."
					}
				}
				Parameter clearExistingContent {
					Default: 1;
					Property: Optional;
					Comment: {
						"(optional) Default is 1.
						If set to 0 any existing cell content will not be overwritten by an empty value if the corresponding data
						in the identifier does not exist (or is 0.0)"
					}
				}
			}
			ExternalProcedure WriteTableQuick {
				Arguments: (IdentifierReference,TopLeftCell,RowDimension,writeZeros,IncludeEmptyRows, IncludeEmptyColumns,IncludeEmptyRowsColumns);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					writeTableQuick(
					  handle : IdentifierReference,
					  scalar string : TopLeftCell,
					  scalar integer : RowDimension,
					  scalar integer : writeZeros,
					  scalar integer : includeEmptyRowsColumns,
					  scalar integer : includeEmptyRows,
					  scalar integer : includeEmptyColumns
					)
				}
				Comment: {
					"This function writes an identifier in table (or list) format to the active excel sheet.
					It only needs the top-left cell where the table to start and the number of indices that should
					be used as row indices.
					
					The resulting table in the sheet will have a \'natural\' layout without any
					empty rows or columns to separate the headers from the actual data.
					
					This is a utility function that is easier to use than :any:`WriteTable`. If you need more control over where row and column headers should appear,
					you should use the :any:`WriteTable` function instead.
					
					**Examples:**
					
					  .. code::
					
					    WriteTableQuick(P(i,j,k), \"A1\", 2) 
					
					    ! produces the same result as
					
					    WriteTable(P(i,j,k), \"A2:B10\", \"C1:D1\", AllowRangeOverflow:1)
					
					    !or 
					
					    WriteTableQuick(P(i,j,k), \"A1\", 1)
					
					    ! produces the same result as
					
					    WriteTable(P(i,j,k), \"A3:A10\", \"B1:H2\", AllowRangeOverflow:1)
					
					
					**Example:** 
					
					  .. code::
					
					    WriteTable( P(i,j,k,\'l1\'), \"A1\", 2 )
						
					- writes the tuples (i,j) to the range \"A2:B[n]\" (where n depends on the amount of data written)
					- writes the tuples (k) to the range \"C1:[N]1\"  (where N depends on the amount of data written)
					- writes the value to the range with the left top corner in C2"
				}
				Handle IdentifierReference {
					Property: Input;
					Comment: {
						"The (non scalar) identifier of which the data will be written to the table in the active sheet.
						
						You can fix a domain index of the identifier to a specific element, such that only a specific slice of the 
						identifier will be written. 
						A specification like A(i,\'fixed-j\',k) can in this way be written in a 2-dimensional table."
					}
				}
				StringParameter TopLeftCell {
					Property: Input;
					Comment: "The top-left excel cell where the table should start.";
				}
				Parameter RowDimension {
					Property: Input;
					Comment: {
						"The number of indices in the domain of the identifier that should be written as rows of the table. 
						The remaining indices will appear as columns.
						The value should be in the range [0 .. dimension of identifier]."
					}
				}
				Parameter WriteZeros {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						If set to 0 a value of 0.0 will appear as an empty cell, otherwise it will be written as an explicit 0."
					}
				}
				Parameter IncludeEmptyRowsColumns {
					Property: Optional;
					Comment: "(optional) Deprecated. Use the arguments :any:`IncludeEmptyRows` and/or :any:`IncludeEmptyColumns` instead.";
				}
				Parameter IncludeEmptyRows {
					Property: Optional;
					Comment: {
						"(optional) Default is 0, only applicable if :any:`RowDimension` is 1.
						
						- If set to 1, a row in which each values equals 0 will be included.
						- If set to 0, such a row will not be written at all."
					}
				}
				Parameter IncludeEmptyColumns {
					Property: Optional;
					Comment: {
						"(optional) Default is 0, only applicable if (dimension-of-identifier - :any:`RowDimension`) equals 1.
						
						- If set to 1, a column in which each values equals 0 will be included.
						- If set to 0, such a column will not be written at all."
					}
				}
			}
			ExternalProcedure WriteCompositeTable {
				Arguments: (IdentifierReference,TopLeftCell,WriteZeros,WriteIndexNames);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					writeCompositeTable(
					  handle : IdentifierReference,
					  scalar string : TopLeftCell,
					  scalar integer : writeZeros,
					  scalar integer : WriteIndexNames
					)
				}
				Comment: {
					"This function writes multiple identifiers to a composite table format in the active excel sheet
					
					**Example:** 
					
					Assume identifiers P(i,j) and Q(i,j), and set Contents = { P, Q }, then
					
					  .. code::
					  
					    WriteCompositeTable( Contents, \"A1\", 1 )
					         
				    - writes all tuples (i,j) for which either P or Q has a non default value to the range \"A2:B<n>\"
					- writes the string \"P\" in the cell \"C1\" (the title of that column) 
					- writes the corresponding P values to the range \"C2:C<n>\"
					- writes the string \"Q\" in the cell \"D1\" (the title of that column) 
					- writes the corresponding Q values to the range \"D2:D<n>\" (where <n> depends on the amount of data)
						 
				    Values equal to 0.0 are written as explicit 0 values."
				}
				Handle IdentifierReference {
					Property: Input;
				}
				StringParameter TopLeftCell {
					Property: Input;
				}
				Parameter WriteZeros {
					Property: Optional;
				}
				Parameter WriteIndexNames {
					Property: Optional;
				}
			}
			ExternalProcedure ReadList {
				Arguments: (IdentifierReference,RowHeaderRange,DataRange,ModeForUnknownElements,MergeWithExistingData);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					readList(
					  handle : IdentifierReference,
					  scalar string : RowHeaderRange,
					  scalar string : DataRange,
					  scalar integer : ModeForUnknownElements,
					  scalar integer : MergeWithExistingData
					)
				}
				Comment: {
					"This function reads a list of data from the active excel sheet into an identifier reference.
					
					The function is similar to :any:`ReadTable` where either the :any:`ReadTable::ColumnHeaderRange` or the :any:`ReadTable::RowHeaderRange` is left empty."
				}
				Handle IdentifierReference {
					Property: InOut;
					Comment: {
						"The (non scalar) identifier to which the data from the sheet will be written.
						
						You can fix a domain index of the identifier to a specific element, such that only a specific slice of the 
						identifier will be written."
					}
				}
				StringParameter RowHeaderRange {
					Property: Input;
					Comment: "The excel range where the indices reside (either horizontally or vertically oriented)";
				}
				StringParameter DataRange {
					Property: Input;
					Comment: {
						"Representing the range from which to read the data.
						This range should be either one row high, or one column wide."
					}
				}
				Parameter ModeForUnknownElements {
					Property: Optional;
					Comment: {
						"(optional) Default = 0.
						This argument specified what to do with elements in the rows or columns that do not exist in the corresponding domain set.
						
						Valid values are:
						
						- 0 : unknown elements are treated as an error, and reading stops.
						
						- 1 : unknown elements are added to the corresponding set, and an error is given if this fails.
						
						- 2 : rows and columns with unknown elements are just silently skipped.
						
						- 3 : rows and columns with unknown elements are skipped, but do raise a warning."
					}
				}
				Parameter MergeWithExistingData {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						
						- If set to 0, the identifier(slice) to write to is first emptied before reading any values.
						- If set to 1, then only the non-blank values in the table will be written to the identifier(slice), and any other existing data in the identifier will remain unmodified."
					}
				}
			}
			ExternalProcedure ReadRawValues {
				Arguments: (IdentifierReference,DataRange,MergeWithExistingData);
				DllName: DLL_NAME;
				Encoding: STR_ENCODING;
				BodyCall: {
					readRawValues(
					  handle : IdentifierReference,
					  scalar string : DataRange,
					  scalar integer : MergeWithExistingData
					)
				}
				Comment: {
					"This function reads a block of values from the active excel sheet into an identifier reference without an explicit matching on element names.
					Rows (and columns) in the range are mapped to element in the domain sets based on the ordinal position.
					
					Please note that the result is unpredictable if the domain sets of the identifier do not have an explicit or implicit ordering.
					
					**Example:** 
					
					If i references an (ordered) set with elements { i1 .. i10 },
					and j references an (ordered) set with elements { j1 .. j10 }, then
					
					.. code::
					
					  ReadRawValues( P(i,j), \"E2:G5\" )
					  
				    assigns E3 to P(\'i2\',\'j1\') and F5 to P(\'i4\',\'j2\')
					here E3 stands for the content of cell E3 in the excel sheet (etc.)"
				}
				Handle IdentifierReference {
					Property: InOut;
					Comment: {
						"A one or two dimensional identifier to write to.
						
						You can fix a domain index of the identifier to a specific element, such that only a specific slice of the 
						identifier will be written."
					}
				}
				StringParameter DataRange {
					Property: Optional;
					Comment: {
						"Representing the range from which to read the data.
						If the identifier is one-dimensional, this range should be either one row high, or one column wide."
					}
				}
				Parameter MergeWithExistingData {
					Property: Optional;
					Comment: {
						"(optional) Default is 0.
						
						If set to 0, the identifier(slice) to write to is first emptied before reading any values.
						If set to 1, then only the non-blank values in the table will be written to the identifier(slice), and
						any other existing data in the identifier will remain unmodified."
					}
				}
			}
		}
	}
}
